从零做一个开源项目
什么是开源？

开源项目包含什么
	开源软件并不是一堆源代码，如果仔细分析或者有亲身体会的话，包含内容还是比较多的，
	1. 源码
	2. 文档，如二次开发文档和用户文档
	3. 开发环境，告诉二次开发者如何搭建和运行代码
	4. 允许他人贡献代码而不是仅仅给别人阅读源码的权限
	5. 问题，用户提问，维护者答复，问题共享（而不是私聊）
	6. 问题列表和升级计划，记录当前问题，以及何时解决，何时升级
其他配套设施
	要做成一个成熟靠谱的开源软件产品，除了以上源码相关的方面，要需要配套的设施，才能完备（官网，demo，文档）
	1.官网
	2.文档
	3.问答社区（github issue）
	4. 及时交流社区，即QQ群，微信群

为何做开源？做开源不挣钱，这是确定的，但是为何要做开源，而且那么多人坚持做开源呢，他们不是完全为了兴趣爱好，完全下班没事干，人只要付出劳动、付出努力，就是本着目的性去的，有兴趣的原因，但是能让自己持之以恒做下去，肯定不是兴趣。原因有以下几点：
	1. 全面提高编程能力：你需要从0打造，每部分代码都需要自己负责，不像在公司中的一颗螺丝钉。
	2. 提高自己的社区知名度：github上的star能间接反应你的身价，他能让你得到业内认可。业内同行认可了，做啥事都好做，如内推工作。
	3. 锻炼自己的产品意识：因为做开源的是产品，不再是单纯的技术活，UI、运维、推广、收集反馈、甚至成本预算，都要考虑。
	4. 技术范儿、极客精神：作为一名程序猿，能业余打造一款开源产品是一件很帅的事情，满足自己的虚荣心。

做什么？
	迈出第一步，这是做开源要想到的第一件事情，很多想做开源的同学，到这一步就想不下去了，还有同学，一上来就定位太高，做着做着发现根本做不出来，就提前放弃了。
不做什么
	一些早期就知名的开源作品，
	想要知道做什么，你就得先明白自己的期望，然后再去想做什么。
		1。要快速做出第一版，至少能用，后面再慢慢迭代升级
		2. 要能方便推广使用，最好是0成本使用。
	做出来，退出去，要快，做得快别人用的也快。排除不做什么
		1. 大型的框架，如做一个UI框架（短期做不完，使用成本高）
		2. 模拟成熟轮子，如再造一个Jquery。
		3.小众的东西，基本没人用
		4.没有特色，100%模仿，用户没有更换的理由
	做什么
	排除以上这些，还剩下的范围就不做了，我推荐做开源产品的方向
		1. 小而精的工具。开发快，使用成本低
		2. 要有特色，哪怕是一个。要和别人不一样，差异化竞争
		3. 一定要大众，50%以上的开发人员都会用到
		4. 避开已经成熟产品垄断的领域，（jquery，vue，react）
比较适合做开源的例子
	1. cache工具（缓存工具，整合localStorage，以及合理的内存销毁机制）
	2. query2json，解析url参数为json格式
	3. 移动端打印console.log，方便移动端输出内容
注册账号：

注意你如果现在已经有了github账号，很重要
你一旦注册一个github账号并且要去做开源产品，那你就要作为一个个人品牌持续运营下去，不能随便更改名字。因此注册账号时，一定要慎重考虑，不能随便弄一个，做一段时间又想改。
组织还是个人，
首先，你要明确你即将注册的账号时专门针对一个产品（即项目账号）还是将运维多个产品（即组织账号）

注册账号：
github和npm注册

GitHub 添加ssh key
	ssh-keygen 
	pbcopy < ~/.ssh/id_rsa.pub
创建项目
clone 项目到本地
修改git账号
git config user.name ‘cc-ui’
git config user.email ‘ljw5203@126.com’

搭建开发环境
	npm init 
		name cc-ui
		version：0.0.1
		description: 
		keywords:

	安装插件
		npm i babel-core babel-loader babel-polyfill babel-preset-es2015 babel-preset-latest webpack webpack-cli --save-dev

	根目录下创建 .babelrc 文件，内容如下
	{
		"presets":["es2015","lasest"],
		"plugins":[]
	}
	
规范一级目录
	项目到一级目录要提前规范好，最起码一些常用的目录要提前定好留用，
	src - 源代码
	release - 发布结果
	test - 单元测试用例
	example - 示例
	doc - 文档
完善readme。md
	# name
	## 简介
	## 安装下载
	## 快速使用
	— 使用文档
	— 二次开发文档
	##交流 & 提问
	## 关于作者
		个人地址
		收款二维码
提交代码

写代码
	代码规范，
写文档 & 写测试用例
	在写文档之前，还需要准备其他工具。定位到项目目录下
	安装gitbook，npm i gitbook-cli -g 然后传家summary.md
	注意，文档和测试用例对于一个开源产品来说非常重要，而且文档和测试用例本身就是代码不可分割的一部分。
如何写测试用例，需要用到其他工具，内容也相对独立，

	


	
